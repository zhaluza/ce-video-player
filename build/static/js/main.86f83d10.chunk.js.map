{"version":3,"sources":["assets/mandalorian.mp4","assets/mandolorian-preview.gif","assets/baby-yoda.svg","Video.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Video","video","preview","logo","skipInterval","useState","previewOff","setPreviewOff","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","showLogo","setShowLogo","logoPosition","setLogoPosition","videoRef","useRef","progressContainerRef","progressRef","handleProgress","videoDuration","progress","current","style","flexBasis","handleSkip","num","useEffect","className","ref","onTimeUpdate","e","target","onEnded","src","poster","onClick","percent","newTime","handleScrub","nativeEvent","offsetX","offsetWidth","title","paused","prevState","togglePlay","time","isNaN","roundedTime","Math","floor","minutes","seconds","calcTime","type","id","min","max","step","onChange","value","volume","handleVolume","App","mandoVideo","mandoVideoPreview","babyYoda","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86f83d10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mandalorian.e53ecffe.mp4\";","module.exports = __webpack_public_path__ + \"static/media/mandolorian-preview.5dadc998.gif\";","module.exports = __webpack_public_path__ + \"static/media/baby-yoda.4986634c.svg\";","import React, { useState, useRef, useEffect } from 'react';\n\nimport './sass/app.scss';\n\nconst Video = ({ video, preview, logo, skipInterval }) => {\n  const [previewOff, setPreviewOff] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(null);\n  const [showLogo, setShowLogo] = useState(false);\n  const [logoPosition, setLogoPosition] = useState('left');\n  const videoRef = useRef(null);\n  const progressContainerRef = useRef(null);\n  const progressRef = useRef(null);\n\n  const handleProgress = (currentTime, videoDuration) => {\n    // setVideoProgress((currentTime / videoDuration) * 100);\n    const progress = (currentTime / videoDuration) * 100;\n    setCurrentTime(currentTime);\n    if (!duration) setDuration(videoDuration);\n    progressRef.current.style.flexBasis = `${progress}%`;\n  };\n  const togglePlay = (video) => {\n    if (!previewOff) setPreviewOff(true);\n    const toggle = video.paused ? 'play' : 'pause';\n    video[toggle]();\n    handleProgress(video);\n    setIsPlaying((prevState) => !prevState);\n  };\n\n  const handleVolume = (video, value) => {\n    video.volume = value;\n  };\n\n  const handleSkip = (num) => {\n    videoRef.current.currentTime += num;\n  };\n\n  const handleScrub = (percent) => {\n    const newTime = (videoRef.current.duration * percent) / 100;\n    videoRef.current.currentTime = newTime;\n  };\n\n  const calcTime = (time) => {\n    if (isNaN(time)) {\n      return '0:00';\n    } else {\n      const roundedTime = Math.floor(time);\n      if (roundedTime < 10) {\n        return `0:0${roundedTime}`;\n      } else if (roundedTime < 60) {\n        return `0:${roundedTime}`;\n      } else {\n        const minutes = Math.floor(60 / roundedTime);\n        const seconds = 60 % roundedTime;\n        return `${minutes}:${seconds}`;\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (currentTime <= 3) {\n      setShowLogo(true);\n      setLogoPosition('left');\n    } else if (duration - currentTime <= 3) {\n      setShowLogo(true);\n      setLogoPosition('right');\n    } else if (currentTime > 3 && currentTime < duration - 3) {\n      setShowLogo(false);\n    }\n  }, [currentTime, duration]);\n  // TODO: General styling\n  return (\n    <div className=\"video__container\">\n      <video\n        className=\"video__player\"\n        ref={videoRef}\n        onTimeUpdate={(e) => {\n          handleProgress(e.target.currentTime, e.target.duration);\n        }}\n        onEnded={() => setIsPlaying(false)}\n        src={video}\n        poster={preview}\n      ></video>\n\n      <img\n        className={`baby-yoda ${showLogo && previewOff ? 'show-logo' : ''} ${\n          logoPosition === 'left' && 'logo-left'\n        } ${logoPosition === 'right' && 'logo-right'}`}\n        src={logo}\n      />\n      <div className=\"video__controls\">\n        <div className=\"progress\">\n          <div\n            className=\"progress__bar\"\n            ref={progressContainerRef}\n            onClick={(e) => {\n              const position = e.nativeEvent.offsetX;\n              const width = progressContainerRef.current.offsetWidth;\n              handleScrub((position / width) * 100);\n            }}\n          >\n            <div className=\"bar__filled\" ref={progressRef}></div>\n          </div>\n          <div className=\"progress__time\"></div>\n        </div>\n        <div className=\"controls__bottom\">\n          <button title=\"play video\" onClick={() => togglePlay(videoRef.current)}>\n            {isPlaying ? <i className=\"fas fa-pause\"></i> : <i className=\"fas fa-play\"></i>}\n          </button>\n          <p className=\"time\">{calcTime(currentTime)}</p>\n          <button onClick={() => handleSkip(-skipInterval)}>-{skipInterval}s</button>\n          <button onClick={() => handleSkip(skipInterval)}>+{skipInterval}s</button>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            id=\"volume-slider\"\n            min=\"0\"\n            max=\"1\"\n            step=\".1\"\n            onChange={(e) => handleVolume(videoRef.current, e.target.value)}\n          ></input>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React from 'react';\nimport Video from './Video';\nimport mandoVideo from './assets/mandalorian.mp4';\nimport mandoVideoPreview from './assets/mandolorian-preview.gif';\nimport babyYoda from './assets/baby-yoda.svg';\nimport './sass/app.scss';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Video video={mandoVideo} preview={mandoVideoPreview} logo={babyYoda} skipInterval={5} />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}